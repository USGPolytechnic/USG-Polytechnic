{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfc6 Welcome to USG Polytechnic Student Information Page","text":""},{"location":"#welcome-to-usg-polytechnic-student-information-page","title":"\ud83c\udfc6 Welcome to USG Polytechnic Student Information Page","text":""},{"location":"#current-adminstration-details","title":"\ud83c\udfdb Current Adminstration Details","text":"<ul> <li>** President:Shreya**</li> <li>** Vice President of Policy: Roberto Ortiz-Gonzalez**</li> <li>** Vice President of Services: Clare Wiegman**</li> <li>\ud83d\udcc5 Adminstration Year: 2025-2026 </li> </ul>"},{"location":"#introduction","title":"Introduction","text":""},{"location":"#how-to-best-use-this-website","title":"How to best use this website","text":""},{"location":"#contact-us","title":"\ud83d\udc65 *Contact us","text":"<p> \u00a9 Undergraduate Student Body - Polytechnic | Arizona State University </p>"},{"location":"Appendix/","title":"Team Member Communication Modes","text":""},{"location":"Appendix/#team-member-communication-modes","title":"Team Member Communication Modes","text":"Team Member I = Text II = Email III = Discord Ethan Peterson \u2705 \u2705 \u2705 Kevin Shah \u2705 \u2705 \u2705 Sanjit \u2705 \u2705 \u2705 Siddhant \u2705 \u2705 \u2705 <p>Preference: Text</p>"},{"location":"Appendix/#team-statements","title":"Team Statements","text":""},{"location":"Appendix/#charter-statement","title":"Charter Statement","text":"<p>Our mission is to design and develop innovative, sustainable, and modular embedded systems that tackle educational and STEM-related challenges. This semester, our focus is on creating an interactive, web-enabled physical device that demonstrates a scientific or engineering concept. The project will prioritize modularity, compliance with industry standards, and user engagement to inspire K-12 students in STEM. Our success will be measured by the device\u2019s interactivity, educational impact, technical durability, and alignment with modular design principles.</p>"},{"location":"Appendix/#mission-statement","title":"Mission Statement","text":"<p>Our objective is to develop an interactive, STEM-focused educational display within four months that captivates K-12 students by presenting a scientific or engineering concept in an intuitive and engaging way. The design will emphasize energy efficiency, modularity, and ease of use, ensuring both technical excellence and compliance with educational standards. Our goal is to create a sustainable and impactful solution that fosters curiosity in STEM while enhancing our team's engineering expertise.</p>"},{"location":"Appendix/#team-goals","title":"Team Goals","text":""},{"location":"Appendix/#deliver-a-refined-market-ready-product","title":"Deliver a Refined, Market-Ready Product","text":"<ul> <li>Develop an innovative, STEM-oriented interactive device that is not only functional but also aesthetically polished and ready for practical deployment. </li> <li>The aim is to produce a high-quality product that resonates with investors and end-users alike.</li> </ul>"},{"location":"Appendix/#foster-professional-collaboration","title":"Foster Professional Collaboration","text":"<ul> <li>Work as a professional, well-coordinated team by leveraging individual expertise, maintaining clear and effective communication, and meeting deadlines efficiently. </li> <li>This project will serve as a testament to our ability to collaborate on a complex engineering challenge and deliver tangible results.</li> </ul>"},{"location":"Appendix/#ensure-scalability-and-industry-standards-compliance","title":"Ensure Scalability and Industry Standards Compliance","text":"<ul> <li>Design the product with future scalability in mind, adhering to industry standards and modular design principles. </li> <li>This approach will make the device easy to maintain, upgrade, and adapt for broader applications, increasing its potential for long-term impact and commercialization.</li> </ul>"},{"location":"Appendix/#demonstrate-advanced-technical-expertise","title":"Demonstrate Advanced Technical Expertise","text":"<ul> <li>Exhibit proficiency in robotics, embedded systems, and software engineering by developing a well-executed, cutting-edge solution to a real-world problem. </li> <li>This project will highlight our ability to implement innovative technology in a meaningful way.</li> </ul>"},{"location":"Appendix/#maximize-user-engagement-and-impact","title":"Maximize User Engagement and Impact","text":"<ul> <li>Create an intuitive and engaging product tailored to the needs of K-12 students and educators. </li> <li>The final design should inspire excitement for STEM while effectively addressing educational challenges, ensuring a positive user experience.</li> </ul>"},{"location":"Appendix/#incorporate-sustainability-and-innovation","title":"Incorporate Sustainability and Innovation","text":"<ul> <li>Integrate energy-efficient components, sustainable materials, and forward-thinking features to enhance the product\u2019s environmental responsibility and technological relevance. </li> <li>A commitment to sustainability and innovation will make our project appealing to investors and future users.</li> </ul>"},{"location":"Appendix/#meet-deadlines-and-manage-resources-efficiently","title":"Meet Deadlines and Manage Resources Efficiently","text":"<ul> <li>Adhere to project timelines, stay within budget, and deliver a fully functional prototype or final product. </li> <li>Effective resource management and timely execution will demonstrate our ability to bring a well-planned concept to reality.</li> </ul>"},{"location":"Appendix/#team-communication-and-coordination","title":"Team Communication and Coordination","text":"<p>Preference: Text</p>"},{"location":"Appendix/#meeting-schedule","title":"Meeting Schedule","text":"<p>Click or copy the URL into your browser, the URL is open to the public to view.</p>"},{"location":"Appendix/#meeting-coordination","title":"Meeting Coordination","text":"<ul> <li>Meeting Reminders: Group text reminders.</li> <li>Modifying Meeting Times: Coordinated through group text; flexible based on availability.</li> <li>Preferred Format: Face-to-face preferred; virtual allowed during late-night or limited access situations.</li> <li>Other Procedures: Use to-do lists, assign tasks based on strengths, avoid solo assignments.</li> </ul>"},{"location":"Appendix/#roles-and-responsibilities","title":"Roles and Responsibilities","text":"Team Member Role Ethan Peterson Assignment Leader Kevin Shah Documentation Head Sanjit Electrical Head Siddhant PCB Head <ul> <li>Roles are assigned through discussion, based on impact and strengths.</li> <li>Role flexibility is maintained to adapt to evolving project needs.</li> </ul>"},{"location":"Appendix/#additional-collaboration-details","title":"Additional Collaboration Details","text":"<ul> <li>Role Changes: Adjusted as needed based on class/project evolution.</li> <li>Role Assignment: Decided collectively to align with active task requirements.</li> <li>Supporting Responsibilities: Proactive communication and shared planning expected. Assignment leader oversees consistency.</li> <li>Adjustments: Swiftly handled based on the situation's urgency and consequences.</li> <li>Activity Tracking: Maintained through regularly updated group to-do lists.</li> <li>Technical Tasks: Assigned by project lead; clarified by the meeting lead.</li> </ul>"},{"location":"Appendix/#team-coordination-accountability","title":"Team Coordination &amp; Accountability","text":"<ul> <li>Deadlines: Clearly established and shared with all members.</li> <li>Checkpoints: Intermediate reviews to stay on track.</li> <li>Final Review: Team-wide sign-off before submission.</li> <li>Skills Assessment: Conduct team interviews to gauge strengths/weaknesses.</li> <li>Training: Fill gaps with resources and guidance.</li> <li>Mentorship: Less experienced members paired with mentors.</li> <li>Feedback: Google Drive used for collection and action planning.</li> <li>Follow-Ups: Scheduled to confirm feedback implementation.</li> </ul>"},{"location":"Appendix/#addressing-missed-contributions","title":"Addressing Missed Contributions","text":"<ul> <li>Immediate Communication: Address concerns directly and respectfully.</li> <li>Root Cause Identification: Understand issues and provide solutions.</li> <li>Reassignment: Tasks reallocated to ensure continuity.</li> <li>Clear Expectations: Responsibilities and deadlines defined.</li> <li>Regular Check-Ins: Frequent progress reviews.</li> <li>Peer Accountability: Team members monitor and support each other.</li> <li>Underperformance: Feedback provided; support plan created.</li> <li>Consequences: If no improvement, escalate to task reassignment or team removal (\"pink slip\").</li> </ul>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Block%20Diagram/","title":"Block Diagram","text":"<p>Link to Drive:</p> <p>Block Diagram</p> <p>Overall Team Subsystem Layout:</p> <p></p> <p>Look under Individual block diagrams for a closer look into our block diagrams describing the temperature and humidity sensor system.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Block%20Diagram/#block-diagram-decision-making-requirements-alignment","title":"Block Diagram Decision-Making &amp; Requirements Alignment","text":""},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Block%20Diagram/#1-decision-making-process","title":"1. Decision-Making Process","text":"<ol> <li>Role-Based Functional Partitioning </li> <li>Why: Each team member owned a distinct subsystem (Sensor, HMI, Motor, Web/MQTT).  </li> <li> <p>How: We drew four blocks\u2014Ethan\u2019s Sensor, Kevin\u2019s HMI, Siddhant\u2019s Motor Driver, Sanjit\u2019s Web/MQTT\u2014and showed a linear data flow through them.</p> </li> <li> <p>Daisy-Chain UART Bus </p> </li> <li>Why: Minimizes wiring complexity and PCB pin usage.  </li> <li> <p>How: Added a single upstream and downstream header on each board. Messages hop from one MCU to the next, using the fixed-length header/footer and byte-addressing to reach the intended destination.</p> </li> <li> <p>Local I\u00b2C &amp; SPI Buses for Peripherals </p> </li> <li>Why: LCD, DHT11/BMP180 sensors, and motor driver chips require I\u00b2C or SPI.  </li> <li> <p>How: Inside each block, we annotated I\u00b2C connections to sensors/displays and SPI to the ILI9341 LCD, highlighting protocol separation (UART vs. I\u00b2C/SPI).</p> </li> <li> <p>Integrated Wi-Fi/MQTT Link on HMI Board </p> </li> <li>Why: Eliminates a standalone gateway PCB and leverages the ESP32\u2019s dual role (display control + cloud connectivity).  </li> <li> <p>How: Drew the ESP32 Wi-Fi module wired to the same UART bus, with a \u201ccloud\u201d icon linked via Wi-Fi arrows to an external MQTT Server.</p> </li> <li> <p>Dedicated 3.3 V Regulators on Every Board </p> </li> <li>Why: Guarantees stable power and isolates noise between subsystems.  </li> <li>How: Each block in the diagram includes its own switching regulator symbol between the 9 V barrel jack input and the MCU\u2019s V<sub>DD</sub>.</li> </ol>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Block%20Diagram/#2-how-the-block-diagram-meets-product-requirements","title":"2. How the Block Diagram Meets Product Requirements","text":"<ul> <li>Real-Time Feedback (&lt; 500 ms latency) </li> <li>UART daisy-chain with deterministic framing ensures predictable message transit times.  </li> <li> <p>I\u00b2C/SPI peripherals respond within microseconds, enabling sub-second end-to-end updates.</p> </li> <li> <p>Modularity &amp; Scalability </p> </li> <li>Clear demarcation of each subsystem allows future boards to \u201cplug in\u201d to the UART chain and be assigned new Source/Dest IDs.  </li> <li> <p>Students can swap or upgrade a block (e.g., swap DHT11 for a BME280) without redrawing the entire diagram.</p> </li> <li> <p>Educational Clarity </p> </li> <li> <p>Linear, left-to-right flow mirrors the physical wiring and power hierarchy, making it easy for K-12 audiences to trace \u201cpower \u2192 sense \u2192 display \u2192 actuation \u2192 cloud.\u201d</p> </li> <li> <p>Robust Power Architecture </p> </li> <li> <p>Separate switching regulators on each PCB guarantee that high-current motor draws do not brown-out sensitive sensor and display circuits.</p> </li> <li> <p>Cloud &amp; Local Interfaces </p> </li> <li> <p>Dual interfaces (physical buttons/LCD + MQTT) satisfy both hands-on exhibit requirements and remote monitoring use cases.</p> </li> <li> <p>Error Isolation &amp; Safety </p> </li> <li>Drawing error-message paths (Type 6 frames) in the diagram underlines how each board can report faults back through the same chain, triggering safe shutdowns or alerts on the LCD.</li> </ul>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Block%20Diagram/#how-did-the-decision-making-process-operate-for-how-we-made-our-block-diagram","title":"How did the decision making process operate for how we made our block diagram:","text":"<p>Our block diagram is a simplified version of what we wanted to create for our project. It demonstrates that we have met the product requirements, as each individual system passed its checkoff by incorporating the necessary components for its subsystem design.</p> <p>However, all designs required a voltage regulator, a UART plug-in, a microcontroller, and clearly defined TX and RX connections. Each block diagram must explicitly indicate where the TX and RX lines connect to the microcontroller. If this is not explicitly stated, it must be evident from the schematic corresponding to that subsystem.</p> <p>The block diagram provides a basic overview of the system\u2019s layout and operation. Additionally, it helps illustrate how information flows within the team. As shown, the data starts with Sanjit, moves to Ethan, then Kevin, and finally reaches Siddhant, who operates the actuator.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/","title":"Message Structure","text":""},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#message-structure-design-decision-making-process","title":"Message Structure: Design &amp; Decision-Making Process","text":"<p>Our team's message structure design was carefully developed to ensure clear data transmission, efficient routing, and precise subsystem interactions. We structured each message using a byte-based format, including clearly defined headers, source IDs, destination IDs, message data, and footers, ensuring that all components correctly interpret and respond to data. The decision-making process involved analyzing how each team member\u2019s subsystem contributes to the overall communication flow. Ethan\u2019s sensor system collects temperature and humidity readings and transmits them via UART and WiFi, ensuring accurate environmental monitoring. Sanjit\u2019s web subsystem processes and forwards sensor readings to the MQTT server, storing and publishing updated data. Kevin\u2019s HMI subsystem receives and displays temperature, humidity, and water flow rate information, ensuring users have real-time system feedback. Siddhant\u2019s motor subsystem uses sensor data to adjust actuator states, controlling cooling mechanisms based on temperature levels. The sequence diagram demonstrates how each component interacts, with messages structured to maintain recurring updates (automatic temperature readings) and event-driven interactions (manual motor adjustments via Bluetooth and UART). Our format also incorporates system integrity mechanisms, ensuring valid message transmission without corruption. By structuring our communication logic around a fixed byte format, we allow for scalable, expandable control, ensuring seamless data processing across I2C, SPI, UART, and MQTT protocols. This approach guarantees that our system functions reliably, meeting user needs and project requirements, while allowing real-world implementation for sensor-actuator-controlled cooling systems.</p> <p>Our team invested significant effort into defining a robust, efficient, and extensible message format. Below is a step-by-step outline of how we arrived at our final design:</p> <ol> <li>Choosing a Fixed-Length Frame </li> <li>Problem: Variable-length messages add parsing overhead and dynamic memory requirements on an 8-bit PIC.  </li> <li>Decision: Use a 64-byte, fixed-length frame so each microcontroller can allocate a single static buffer.  </li> <li> <p>Benefit: Simplifies CRC or header/footer checks, avoids heap fragmentation, and guarantees predictable timing.</p> </li> <li> <p>Implementing Header &amp; Footer Markers </p> </li> <li>Problem: Byte-slip and line noise on the UART bus can desynchronize frame boundaries.  </li> <li>Decision: Reserve bytes 0\u20131 for a unique 2-byte header (<code>0x41 0x5A</code>) and bytes 62\u201363 for a matching footer (<code>0x59 0x42</code>).  </li> <li> <p>Benefit: Receivers scan for the header, read exactly 64 bytes, then confirm the footer\u2014minimizing framing errors.</p> </li> <li> <p>Defining Source &amp; Destination IDs </p> </li> <li>Problem: A daisy-chain bus requires a way to route messages hop-by-hop to the correct board.  </li> <li>Decision: Use byte 2 for Source ID and byte 3 for Destination ID, assigned as ASCII codes (<code>\u2018E\u2019=0x45</code>, <code>\u2018K\u2019=0x4B</code>, <code>\u2018S\u2019=0x53</code>, <code>\u2018T\u2019=0x54</code>).  </li> <li> <p>Benefit: Any board can inspect these bytes and either process the frame (if addressed) or forward it downstream.</p> </li> <li> <p>Compact, Scaled Integer Payloads </p> </li> <li>Problem: Floating-point values are slow to convert and inflate message size; we need multiple sensor readings in one frame.  </li> <li>Decision: Encode temperature, humidity, and flow rate as <code>uint16_t</code> scaled by 100 (e.g., 25.5 \u00b0C \u2192 2550).  </li> <li> <p>Benefit: Packs three readings into 6 bytes, reduces bus traffic, and keeps arithmetic simple on the PIC.</p> </li> <li> <p>Message Type Field &amp; Enumerations </p> </li> <li>Problem: We needed a way to distinguish between control commands, sensor data, display updates, cloud uploads, and error reports.  </li> <li>Decision: Reserve the first two bytes of the payload (bytes 4\u20135 of the frame) for a 16-bit Message Type code (<code>0x0001</code> through <code>0x0006</code>).  </li> <li> <p>Benefit: New message types can be added by extending the enumeration; receivers switch on this field to parse the remaining payload appropriately.</p> </li> <li> <p>Error-Handling Messages </p> </li> <li>Problem: Silent failures\u2014like a disconnected sensor or framing error\u2014are difficult to diagnose in a demo or exhibit.  </li> <li>Decision: Define Message Type 6 as an \u201cError Message,\u201d including one byte for Subsystem ID and up to 55 bytes of ASCII text describing the fault.  </li> <li> <p>Benefit: Boards can log or display human-readable error strings, and the HMI can both alert users locally and publish alerts remotely via MQTT.</p> </li> <li> <p>Balancing Polling vs. Event-Driven Control </p> </li> <li>Problem: Continuous polling can flood the bus; purely event-driven updates risk stale displays.  </li> <li>Decision: <ul> <li>Schedule periodic \u201cSensor Data Response\u201d (Type 3) at 1 Hz.  </li> <li>Allow \u201cSet Water Flow\u201d (Type 1) and \u201cError Message\u201d (Type 6) to be sent immediately on threshold triggers or fault detection.  </li> </ul> </li> <li> <p>Benefit: Ensures live monitoring without bus congestion, while critical commands break through immediately when needed.</p> </li> <li> <p>Future Scalability Considerations </p> </li> <li>Problem: We anticipate adding more sensors or actuators in later iterations.  </li> <li>Decision: <ul> <li>Reserve unused Message Type codes (0x0007\u20130x00FF) for future features.  </li> <li>Keep the header/footer paradigm intact so no existing code needs to change when new types arrive.  </li> </ul> </li> <li>Benefit: New subsystems can adopt the same framing and ID scheme, plug into the daisy-chain, and begin communicating with minimal firmware changes.</li> </ol> <p>Through strategic choices around frame length, header/footer synchronization, ID-based routing, and carefully enumerated message types, our team crafted a message structure that is:</p> <ul> <li>Deterministic: Predictable timing and bounded bus utilization  </li> <li>Robust: Built-in framing checks and explicit error reporting  </li> <li>Extensible: Easily accommodates additional message types and subsystems  </li> <li>Efficient: Low overhead, integer-only arithmetic, and compact payloads  </li> </ul> <p>This design underpins reliable communication across all four PCBs, meeting both our educational exhibit goals and real-world product requirements.  </p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#team-member-roles","title":"Team Member Roles","text":"Team Member Role Character ID Siddhant Motor Subsystem S Ethan Sensor Subsystem E Kevin HMI Subsystem K Sanjit Web Subsystem T"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#message-table-message-type-overview","title":"Message Table (Message Type Overview)","text":"Message Type Message ID Type: uint8_t Ethan Role: Sensor ID: E Siddhant Role: Motor ID: S Kevin Role: HMI ID: K Sanjit Role: WebID: T sensor value 0x40 Send: Turn motor on or off. Receive: Motor turns off or on due to temperature reading. Receive: (displayed on HMI) Receive: (mqtt topic: /EGR314/TEAMXYZ/SENSOR1)"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#detailed-message-flow-table","title":"Detailed Message Flow Table","text":"Message Purpose Message ID (8 bytes) Sender Receivers Description Send Temperature Data <code>FSTE01FS</code> Sanjit (T) Ethan (E) Sanjit sends temperature sensor data to Ethan. Forward Temp to HMI + Web <code>FSET43FS</code>, <code>FSEK43FS</code> Ethan (E) Sanjit (T), Kevin (K) Ethan sends processed temperature (43) to Kevin (HMI) and Sanjit (Web). Motor Off Command <code>FSTS01FS</code> Sanjit (T) Ethan (E) Sanjit requests motor OFF; Ethan checks if it applies to him and acts if so. Motor OFF Status \u2192 Kevin &amp; T <code>FSST01FS</code>, <code>FSSK01FS</code> Ethan (E) Sanjit (T), Kevin (K) Ethan informs Kevin and Sanjit of updated motor status (motor OFF). Motor ON Command (example) <code>FSTS02FS</code> Sanjit (T) Ethan (E) Similar process for turning motor ON; <code>02</code> could represent ON. Motor ON Status \u2192 Kevin &amp; T <code>FSST02FS</code>, <code>FSSK02FS</code> Ethan (E) Sanjit (T), Kevin (K) Status update to others showing motor is ON."},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#siddhant-messages","title":"Siddhant Messages","text":"Action Message ID Recipient Description Motor OFF <code>FSST01FS</code> Sanjit Motor off status update <code>FSSK01FS</code> Kevin Motor off status update Motor Reverse Status <code>FSST02FS</code> Sanjit Motor is reversing <code>FSSK02FS</code> Kevin Motor is reversing Motor Forward Status <code>FSST03FS</code> Sanjit Motor is running forward <code>FSSK02FS</code> Kevin Motor is running forward"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#ethan-messages","title":"Ethan Messages","text":"Message ID Sender Recipient Description <code>FSEK00FS</code> Ethan Kevin Temperature message (<code>00</code> = temperature) <code>FSET00FS</code> Ethan Sanjit Temperature message (<code>00</code> = temperature) <code>FSES00FS</code> Ethan Siddhant Temperature message (<code>00</code> = temperature)"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#sanjit-messages-to-ethan","title":"Sanjit Messages to Ethan","text":"Message ID Sender Recipient Description <code>FSSE03FS</code> Sanjit Ethan Command to turn on"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#kevin-messages","title":"Kevin Messages","text":"Message ID Sender Recipient Description <code>FSEK00FS</code> Ethan Kevin Temperature to be sent <code>FSSK01FS</code> Siddhant Kevin Motor off <code>FSEK02FS</code> Siddhant Kevin Forward Motor <code>FSEK03FS</code> Siddhant Kevin Reverse Motor"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#general-message-structure","title":"General Message Structure","text":"Byte Range Description 0 - 1 Header (0x41 0x5A) 2 Source ID (uint8_t) 3 Destination ID (uint8_t) 4 - 61 Message Data (Variable Length &lt; 58 Bytes) 62 - 63 Footer (0x59 0x42)"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#message-types","title":"Message Types","text":""},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#1-set-system-speed","title":"1. Set System Speed","text":"<p>Used when the In-person or Web-Person sets a command speed. Sent from ESP32 and PIC18F47Q10.</p> Byte Description Data Type 1-2 Message Type (1 = Set Speed) uint16_t 3-4 Speed Value (e.g., 200m/s) uint16_t"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#2-request-sensor-data","title":"2. Request Sensor Data","text":"<p>Used when ESP32 requests sensor data from PIC18F47Q10. PIC18F responds with temperature, humidity, and water flow rate.</p> Byte Description Data Type 1-2 Message Type (2 = Request Sensor Data) uint16_t 3 Sensor ID (1 = DHT11, 2 = SEN0229) uint8_t"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#3-sensor-data-response","title":"3. Sensor Data Response","text":"<p>Used when PIC18F sends sensor data back to ESP32. Contains multiple sensor readings in a single message.</p> Byte Description Data Type 1-2 Message Type (3 = Sensor Data Response) uint16_t 3-4 Temperature (\u00b0C \u00d7 100, e.g., 25.5\u00b0C = 2550) uint16_t 5-6 Humidity (% \u00d7 100, e.g., 50.1% = 5010) uint16_t 7-8 Water Flow Rate (L/min \u00d7 100, e.g., 10.5 L/min = 1050) uint16_t"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#4-lcd-update-command","title":"4. LCD Update Command","text":"<p>Sent from ESP32 to LCD (via SPI).</p> Byte Description Data Type 1-2 Message Type (4 = LCD Update Command) uint16_t 3-58 Text String (e.g., \u201cSpeed: 200 m/s, Temperature: 30\u00b0C, Water flow Rate = 50 L/min\u201d) char[55]"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#5-cloud-update","title":"5. Cloud Update","text":"<p>Sent from ESP32 to cloud via Wi-Fi.</p> Byte Description Data Type 1-2 Message Type (5 = Cloud Update) uint16_t 3-58 JSON String (Sensor Data) char[55]"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#6-error-message","title":"6. Error Message","text":"<p>Network Failure, Signal Loss.</p> Byte Description Data Type 1-2 Message Type (6 = Error Message) uint16_t 3 Subsystem ID (1 = PIC18, 2 = ESP32, 3 = Temperature Sensor, 4 = Water Turbine, 5 = LCD) uint8_t 4-58 Error String char[55]"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Message%20Structure/#example-message-format","title":"Example Message Format","text":"<p>For a message requesting sensor data from PIC18F47Q10:</p> <p>Header: 0x41 0x5A Source ID: 0x01 (ESP32) Destination ID: 0x02 (PIC18F47Q10) Message Data: - Message Type: 0x02 (Request Sensor Data) - Sensor ID: 0x01 (DHT11) Footer: 0x59 0x42</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/","title":"The Process Diagram","text":"<p>Process Diagram</p> <p></p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#communication-sequence-functionality-requirements-alignment","title":"Communication Sequence Functionality &amp; Requirements Alignment","text":"<p>Our sequence diagram captures the end-to-end flow of data and control between the Web User, ESP32 Wi-Fi/Cloud subsystem, HMI, Sensor board, and Motor board. Below we dissect each major functional step, illustrating how it meets both user needs and the product requirements.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#1-user-initiated-data-request","title":"1. User-Initiated Data Request","text":"<p>Flow: 1. Web User \u2192 MQTT Server    - User clicks \u201cGet Weather Data\u201d in the companion app or browser. 2. MQTT Server \u2192 ESP32 (Web Subsystem)    - ESP32 subscribes to a \u201crequest/data\u201d topic and immediately receives the trigger.  </p> <p>Function &amp; Benefits: - On-Demand Control: Empowers remote users to manually refresh data, satisfying the requirement for interactive, user-driven queries. - Decoupled Architecture: By using MQTT topics, the Web-to-device link is robust to network fluctuations and scales to multiple clients without modifying embedded code.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#2-sensor-polling-response","title":"2. Sensor Polling &amp; Response","text":"<p>Flow: 1. ESP32 \u2192 PIC18F (Sensor Subsystem) via UART    - Frames a Request Sensor Data message (Type 0x0002) with Source=T, Dest=E. 2. PIC18F \u2192 ESP32 via UART    - Replies with Sensor Data Response (Type 0x0003), packing temperature (\u00d7100), humidity (\u00d7100), and flow rate (\u00d7100) in a single 64-byte frame.</p> <p>Function &amp; Benefits: - Deterministic Timing: UART exchange completes in under 50 ms, ensuring end-to-end latency stays well below the 500 ms target. - Compact, Scalable Data: Packing three sensor readings in one frame reduces bus traffic and simplifies parsing on both ends. - Error Detection Ready: Fixed headers/footers allow both boards to detect framing errors and respond with an Error Message if needed.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#3-local-display-update-actuator-control","title":"3. Local Display Update &amp; Actuator Control","text":"<p>Flow: 1. ESP32 \u2192 PIC18F (HMI Subsystem) via UART    - Sends an LCD Update Command (Type 0x0004) including a formatted text string: </p><pre><code>\u201cTemp: 25.5\u00b0C, Hum: 50.1%, Flow: 10.5 L/min\u201d\n</code></pre> 2. ESP32 \u2192 PIC18F (Motor Subsystem) via UART (if temperature threshold exceeded)    - Sends a Set Water Flow command (Type 0x0001) with desired flow rate. 3. PIC18F (Motor) \u2192 ESP32 &amp; HMI    - Acknowledges with a Sensor Data Response echoing new actuator state, and publishes a Motor Status update to the HMI display via another LCD Update Command.<p></p> <p>Function &amp; Benefits: - Immediate Local Feedback: Users at the exhibit see current values and actuator state on the I\u00b2C LCD within tens of milliseconds. - Automatic Control Logic: Temperature-driven \u201cif &gt; threshold, send flow command\u201d logic runs on the ESP32, providing hands-free regulation\u2014key for agricultural demos. - Consistent UX: All subsystems use the same framing and ID scheme, reducing firmware complexity and improving maintainability.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#4-cloud-publication-remote-monitoring","title":"4. Cloud Publication &amp; Remote Monitoring","text":"<p>Flow: 1. ESP32 \u2192 MQTT Server    - Publishes a Cloud Update message (Type 0x0005) serialized as JSON, containing <code>{ \"temp\":2550, \"hum\":5010, \"flow\":1050 }</code>. 2. MQTT Server \u2192 Web User    - Distributes the updated payload to all subscribed dashboards in real time.</p> <p>Function &amp; Benefits: - Real-Time Remote Visibility: Stakeholders off-site can monitor conditions live, fulfilling the \u201conline rapid updates\u201d requirement. - Standardized Data Format: JSON payloads enable easy integration with third-party analytics or mobile apps without additional parsing code on the microcontrollers.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#5-error-handling-safety","title":"5. Error Handling &amp; Safety","text":"<p>Flow: 1. Any MCU \u2192 ESP32 (or upstream board)    - On detect\u00aded framing, sensor, or communication failure, sends an Error Message (Type 0x0006) with subsystem ID and ASCII error string. 2. ESP32 \u2192 HMI &amp; Web    - Displays the error on the LCD and publishes an alert topic via MQTT. 3. Fail-Safe Actuation    - Motor board, upon detect\u00ading \u201csensor offline\u201d or repeated framing errors, automatically shuts down the actuator.</p> <p>Function &amp; Benefits: - Robust Diagnostics: Clear error propagation ensures fast troubleshooting during demos or field use. - User Safety: Automated motor shutdown on critical faults prevents uncontrolled water flow\u2014meeting safety requirements for all-age exhibits.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#summary-of-functional-alignment","title":"Summary of Functional Alignment","text":"<ul> <li>Latency &amp; Predictability: Deterministic framing and prioritized message types guarantee sub-second loops.  </li> <li>Bi-Directional Control: Both manual (web) and automatic (threshold-based) command paths exist.  </li> <li>Scalability &amp; Maintainability: Uniform message format and modular blocks simplify adding new sensors or actuators.  </li> <li>Educational Transparency: Each step\u2014from request through actuation\u2014is explicit, making it easy for students to trace and understand in the exhibit setting.  </li> <li>Reliability &amp; Safety: Error messages and fail-safe logic are integral to the sequence, ensuring the system remains stable and secure under fault conditions.</li> </ul>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#top-5-changes-to-software-desingn","title":"Top 5 changes to software desingn","text":""},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/The%20Process%20Diagram/#top-5-biggest-changes-to-software-design-since-the-software-proposal","title":"Top 5 Biggest Changes to Software Design Since the Software Proposal","text":"<ol> <li> <p>Sensor Rework and Integration    Initially, the team encountered issues with sensor selection, requiring multiple iterations to find a reliable temperature and humidity sensor. The previous sensors either failed due to voltage inconsistencies or were incompatible with the system\u2019s communication protocol. The team ultimately selected the AHT21, which offered stable data transmission and was easy to integrate using I2C communication. This change ensured accurate environmental readings, improving system functionality and satisfying project requirements. The UML sequence diagram illustrates how sensor data is properly transmitted via WiFi and UART, ensuring reliable communication with the MQTT system and motor subsystem.  </p> </li> <li> <p>HMI Rework for User Interaction and Proper Display    The initial HMI design lacked clarity in displaying temperature and humidity readings, creating difficulties for user interaction. The team reworked the HMI structure to properly visualize real-time environmental data, ensuring that users could access updates efficiently. The improvements included optimizing SPI communication and refining display logic, ensuring that sensor readings were correctly formatted. This refinement is reflected in the sequence diagram, where the HMI now processes and displays information received from the MQTT system and motor drive, ensuring proper user feedback.  </p> </li> <li> <p>Byte System Redesign for Data Transmission    The initial approach to byte-based communication caused misinterpretations between subsystems, leading to incorrect actuator responses and inconsistent data flow. The team redefined the 8-byte structure, ensuring each subsystem clearly understands its role and can process messages accurately. This involved assigning specific bytes to source ID, destination ID, message data, and control flags, ensuring seamless integration between the sensor, motor drive, MQTT system, and HMI display. The UML diagram highlights structured message transmission, demonstrating how systems now exchange properly formatted data without errors.  </p> </li> <li> <p>MPLAB Code Functionality and API Integration    Initially, there were significant challenges in implementing MPLAB code for the PIC microcontroller, particularly in defining the API structure for subsystem communication. The team overcame this issue by carefully debugging the MPLAB code and structuring the API so that identification of users and devices followed a logical format. This update allowed proper recognition of commands from different components, ensuring seamless message routing. The UML sequence diagram now correctly represents this improved interaction, showing how messages flow from the sensor subsystem to the motor drive and MQTT system without data loss or misinterpretation.  </p> </li> <li> <p>Synchronization of Sensor Data Across Subsystems    One of the biggest challenges was ensuring that sensor data was properly translated across all subsystems so that every component remained in sync. Early versions of the system had timing mismatches, causing incorrect actuator responses. The team resolved this by refining data transmission timing, adding delays where necessary, and ensuring that each subsystem processes temperature readings in real time. The UML diagram illustrates how information is processed correctly through structured communication delays, ensuring smooth synchronization across all components.  </p> </li> </ol> <p>These refinements ensure that the system meets user needs, project specifications, and class requirements, improving both functionality and real-world applicability. The UML sequence diagram validates these changes by accurately depicting sensor communication, actuator responses, data transmission, and user interaction throughout the system.</p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Individual%20Block%20Diagrams/%28HMI%29%20LCD%20Block%20Diagram%20%28Kevin%29/","title":"(HMI) LCD Block Diagram (Kevin)","text":"<p>LCD Block Diagram </p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Individual%20Block%20Diagrams/Internet%20Connection%20Block%20Diagram%20%28Sanjit%29/","title":"Internet Connection Block Diagram (Sanjit)","text":"<p>Internet Connection Subsystem</p> <p></p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Individual%20Block%20Diagrams/Motor%20Diagram%20Block%20Diagram%20%28Siddhant%29/","title":"Motor Diagram Block Diagram (Siddhant)","text":"<p>Motor Driver Block Diagram</p> <p></p>"},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/Individual%20Block%20Diagrams/Temperature%20Sensor%20Block%20Diagram%20%28Ethan%29/","title":"Temperature Sensor Block Diagram (Ethan)","text":"<p>Temperature Sensor Block Diagram</p> <p></p>"}]}